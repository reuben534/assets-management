import React, { useEffect, useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Typography,
  Grid,
  Fade,
  CircularProgress,
  Alert,
  Stack,
  useTheme
} from '@mui/material';
import {
  Assessment as AssessmentIcon,
  PictureAsPdf as PdfIcon,
  TableChart as CsvIcon,
  Add as AddIcon,
  BarChart as ChartIcon
} from '@mui/icons-material';
import { getReports, generateReport } from '../services/api';
import ReportCard from '../components/ReportCard';
import { jsPDF } from 'jspdf';
import Papa from 'papaparse';

const ReportManagement = () => {
  const [reports, setReports] = useState([]);
  const [reportType, setReportType] = useState('asset-usage');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [generating, setGenerating] = useState(false);
  const theme = useTheme();

  useEffect(() => {
    const fetchReports = async () => {
      setLoading(true);
      setError('');
      try {
        const { data } = await getReports();
        setReports(data || []);
      } catch (err) {
        console.error('Error fetching reports:', err);
        setError('Failed to load reports. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    fetchReports();
  }, []);

  const handleGenerate = async () => {
    setGenerating(true);
    setError('');
    try {
      const { data } = await generateReport({ reportType });
      setReports([...reports, data]);
    } catch (err) {
      console.error('Error generating report:', err);
      setError('Failed to generate report. Please try again.');
    } finally {
      setGenerating(false);
    }
  };

  const exportToPDF = (report) => {
    try {
      const doc = new jsPDF();
      const content = JSON.parse(report.content);
      
      // Header
      doc.setFontSize(20);
      doc.setTextColor(theme.palette.primary.main);
      doc.text(`${reportType === 'asset-usage' ? 'Asset Usage' : 'Request History'} Report`, 20, 20);
      
      // Metadata
      doc.setFontSize(12);
      doc.setTextColor(51, 51, 51);
      doc.text(`Generated by: ${report.generatedBy.name}`, 20, 35);
      doc.text(`Date: ${new Date(report.generatedDate).toLocaleDateString()}`, 20, 45);

      // Content
      if (reportType === 'asset-usage') {
        const stats = [
          ['Total Assets', content.totalAssets],
          ['Available', content.available],
          ['Assigned', content.assigned],
          ['Under Maintenance', content.underMaintenance]
        ];

        let y = 60;
        stats.forEach(([label, value]) => {
          doc.text(`${label}: ${value}`, 20, y);
          y += 10;
        });
      } else {
        let y = 60;
        content.forEach((req, index) => {
          if (y > 250) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${index + 1}. User: ${req.user}`, 20, y);
          doc.text(`   Asset: ${req.asset}`, 30, y + 7);
          doc.text(`   Status: ${req.status}`, 30, y + 14);
          doc.text(`   Date: ${new Date(req.requestDate).toLocaleDateString()}`, 30, y + 21);
          y += 30;
        });
      }

      doc.save(`${reportType}-report-${report._id}.pdf`);
    } catch (err) {
      console.error('Error exporting to PDF:', err);
      setError('Failed to export PDF. Please try again.');
    }
  };

  const exportToCSV = (report) => {
    try {
      const content = JSON.parse(report.content);
      let csvData;

      if (reportType === 'asset-usage') {
        csvData = [{
          "Total Assets": content.totalAssets,
          "Available": content.available,
          "Assigned": content.assigned,
          "Under Maintenance": content.underMaintenance,
          "Generated By": report.generatedBy.name,
          "Generated Date": new Date(report.generatedDate).toLocaleDateString(),
        }];
      } else {
        csvData = content.map(req => ({
          "User": req.user,
          "Asset": req.asset,
          "Status": req.status,
          "Request Date": new Date(req.requestDate).toLocaleDateString(),
        }));
      }

      const csv = Papa.unparse(csvData);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.setAttribute('download', `${reportType}-report-${report._id}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (err) {
      console.error('Error exporting to CSV:', err);
      setError('Failed to export CSV. Please try again.');
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Fade in timeout={500}>
      <Box sx={{ p: 3 }}>
        <Box display="flex" alignItems="center" mb={3}>
          <AssessmentIcon sx={{ fontSize: 32, color: 'primary.main', mr: 2 }} />
          <Typography variant="h4" fontWeight="bold" color="primary">
            Report Management
          </Typography>
        </Box>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        <Box sx={{ mb: 4 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={6} md={4}>
              <FormControl fullWidth>
                <InputLabel>Report Type</InputLabel>
                <Select
                  value={reportType}
                  onChange={(e) => setReportType(e.target.value)}
                  label="Report Type"
                  startAdornment={<ChartIcon sx={{ mr: 1, color: 'action.active' }} />}
                >
                  <MenuItem value="asset-usage">Asset Usage</MenuItem>
                  <MenuItem value="request-history">Request History</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Button
                variant="contained"
                onClick={handleGenerate}
                disabled={generating}
                startIcon={generating ? <CircularProgress size={20} /> : <AddIcon />}
                sx={{
                  height: '56px',
                  borderRadius: 2,
                  textTransform: 'none',
                  px: 3
                }}
                fullWidth
              >
                {generating ? 'Generating...' : 'Generate Report'}
              </Button>
            </Grid>
          </Grid>
        </Box>

        <Grid container spacing={3}>
          {reports.map((report) => (
            <Grid item xs={12} key={report._id}>
              <Box sx={{ mb: 2 }}>
                <ReportCard report={report} />
                <Stack direction="row" spacing={2} mt={2}>
                  <Button
                    variant="outlined"
                    onClick={() => exportToPDF(report)}
                    startIcon={<PdfIcon />}
                    sx={{
                      borderRadius: 2,
                      textTransform: 'none',
                      color: 'error.main',
                      borderColor: 'error.main',
                      '&:hover': {
                        borderColor: 'error.dark',
                        backgroundColor: 'error.lighter'
                      }
                    }}
                  >
                    Export PDF
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={() => exportToCSV(report)}
                    startIcon={<CsvIcon />}
                    sx={{
                      borderRadius: 2,
                      textTransform: 'none',
                      color: 'success.main',
                      borderColor: 'success.main',
                      '&:hover': {
                        borderColor: 'success.dark',
                        backgroundColor: 'success.lighter'
                      }
                    }}
                  >
                    Export CSV
                  </Button>
                </Stack>
              </Box>
            </Grid>
          ))}
          
          {!reports.length && !loading && (
            <Grid item xs={12}>
              <Box
                display="flex"
                flexDirection="column"
                alignItems="center"
                justifyContent="center"
                py={6}
                sx={{ backgroundColor: 'background.paper', borderRadius: 2 }}
              >
                <AssessmentIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                <Typography variant="h6" color="text.secondary" gutterBottom>
                  No Reports Available
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Generate a new report to get started
                </Typography>
              </Box>
            </Grid>
          )}
        </Grid>
      </Box>
    </Fade>
  );
};

export default ReportManagement;